using System;
using System.Collections.Generic;

/*
	Project Notes:

	class subject 
		decimal[][] grade
		+ grade
		+- multiplier
	.

	calculating grade average:
	for each grade in grades 
		grade * multiplier
		sum =+ grade
	for each multiplier in multipliers
		multi =+ multiplier
		
	all grades(sum) / all multipliers(multi) = average

		
*/

namespace Grades
{
	internal class Cli
	{

		public static void Main(string[] args)
		{
			// will call further commandline - menus
			// call table.read(); to inizialize data bases for runtime

			// setting the console and menu title
			cliTitleNew = "Grade Calc v0.1c";
			Console.Title = cliTitleNew;

			// setting the bool for clearing console on menu switch
			ClearOnSwitch = true;

			// catching CTRL+C event
			Console.CancelKeyPress += new ConsoleCancelEventHandler(ExitHandler);

			Table.Subject.Add("englisch");
			Table.Subject.Add("deutsch");
			Table.Subject.Add("franz√∂sisch");
			Console.WriteLine(Table.Subjects.Count);
			for (int i = 0; i < Table.Subjects.Count; i++)
			{
				Console.WriteLine(Table.Subjects[i].name);
			}
			Console.ReadKey();

			CliMenu();
			ExitApp();
		}

		public static void CliMenu()
		{
			bool ExitPending = false;
			while (!ExitPending)
			{
				ClearMenu();
				Console.WriteLine("--- " + cliTitleNew + " ---");
				Console.WriteLine("[1] Add grade");
				Console.WriteLine("[2] Print overview");
				Console.WriteLine("[3] Manage data");
				Console.WriteLine("[4] Exit program");
				Console.Write("\n");
				// input loop; enforcing valid input
				bool ValidInput = false;
				while (!ValidInput)
				{
					Console.Write("> ");
					string input = Console.ReadKey().KeyChar.ToString();
					Console.Write("\n");
					switch (input)
					{
						case "1":
							ValidInput = true;
							AddMenu();
							break;

						case "2":
							ValidInput = true;
							OverviewMenu();
							break;

						case "3":
							ValidInput = true;
							TableMenu();
							break;

						case "4":
							ValidInput = true;
							ExitPending = true;
							break;

						default:
							Console.Write("error: invalid option");
							new System.Threading.ManualResetEvent(false).WaitOne(400);

							/*
							if (ClearOnSwitch)
							{
								ClearCurrentConsoleLine();
								Console.SetCursorPosition(0, Console.CursorTop - 1);
								ClearCurrentConsoleLine();
							}
							else
							{
								Console.Write("\n");
							}
							*/

							ClearCurrentConsoleLine();
							Console.SetCursorPosition(0, Console.CursorTop - 1);
							ClearCurrentConsoleLine();
							break;
					}
				}

			}
		}

		// Clear screen if program is interrupted with CTRL+C
		protected static void ExitHandler(object sender, ConsoleCancelEventArgs args)
		{
			ExitApp();
		}

		public static string cliTitleNew;
		public static string cliTitleOld = Console.Title;

		public static void ExitApp()
		{
			Console.Title = cliTitleOld;
			Console.WriteLine("Closing...");
			ClearMenu();
		}

		// bool for clearing console on menu switch
		static bool ClearOnSwitch;

		static void ClearMenu()
		{
			if (ClearOnSwitch)
			{
				// new System.Threading.ManualResetEvent(false).WaitOne(100);
				Console.Clear();
			}
		}

		static void ClearCurrentConsoleLine()
		{
			int currentLineCursor = Console.CursorTop;
			Console.SetCursorPosition(0, Console.CursorTop);
			Console.Write(new string(' ', Console.BufferWidth));
			Console.SetCursorPosition(0, currentLineCursor);
		}

		static void AddMenu()
		{
			ClearMenu();
			Console.WriteLine("--- Adding new grade ---");
			// get List of all subjects
			// make for loop for selection 
			// make "add new grade" selection
			// sort grades by alphabet
			// get user input choice
			// Console.ReadKey();
		}

		static void OverviewMenu()
		{
			// display average for each grade
			// display average in total
			// display compensation points
			// display graphic for points
		}

		static void TableMenu()
		{
			// read table
			// importing table
			// export table
			// erase table
		}

	}

	public class Table
	{

		public static List<Subject> Subjects = new List<Subject>();

		public class Subject
		{

			public string name { get; private set; }

			private Subject(string name)
			{
				this.name = name;
			}

			public static void Add(string name)
			{
				Subject temp = new Subject(name);
				Table.Subjects.Add(temp);
			}

			public static void Remove(int index)
			{
				Table.Subjects.RemoveAt(index);
			}

			public int Average()
			{
				return 0;
			}

			public List<Grade> Grades = new List<Grade>();

			public class Grade
			{
				public int value { get; private set; }
				public int weight { get; private set; }

				private Grade(int value, int weight)
				{
					this.value = value;
					this.weight = weight;
				}

				public void Add(int value, int weight)
				{
					Grade temp = new Grade(int value, int weight);
				}

			}

			public void AddGrade(int value, int weight)
			{

			}

			public void ModifyGrade(int value, int weight, int index)
			{

			}

			public void RemoveGrade(int index)
			{

			}
		}

		public void Read()
		{

		}

		public void Clear()
		{

		}

		public void Write()
		{

		}

		int TotalAverage()
		{
			return 0;
		}

	}

}